" Source config
" =============
" Set up vim dirs. {{{
let $VIMDIR = $HOME.(has('nvim') ? '/.config/nvim' : (has('unix') ? '/.vim' : '/vimfiles'))
" Backup, swap, undo files
" Create vim dirs if missing
if !isdirectory($VIMDIR.'/undo')   | call mkdir($VIMDIR.'/undo', 'p')   | endif
if !isdirectory($VIMDIR.'/backup') | call mkdir($VIMDIR.'/backup', 'p') | endif
if !isdirectory($VIMDIR.'/swap')   | call mkdir($VIMDIR.'/swap', 'p')   | endif
if !isdirectory($VIMDIR.'/config') | call mkdir($VIMDIR.'/config', 'p') | endif
if has('persistent_undo')
    set undodir=$VIMDIR/undo//
    set undofile
endif
set backupdir=$VIMDIR/backup//         " For backup files
set backup
set directory=$VIMDIR/backup//         " For .swp files
set swapfile
set backupskip=/tmp/*                  " Add some paths not to back up
set backupskip^=/dev/shm/*             " Shared memory RAM disk
set backupskip^=/var/tmp/*             " Debian's $TMPDIR for sudoedit(8)
if !has('unix')
    set backupskip-=/dev/shm/*
    set backupskip-=/var/tmp/*
endif
if exists('+history')
	set history=2000                   " Max is 10000
endif
set undolevels=2000                    " Number of undos
set undoreload=8000                    " Number of lines to save for undo
" }}}

" Source any .vim files from config dir.
runtime! config/*.vim
" config/settings.vim
" config/plugins.vim
" config/mappings.vim

" Todo {{{
" ====
" https://github.com/junegunn/dotfiles/blob/master/vimrc#L856
function! s:todo() abort
    let entries = []
    for cmd in ['git grep -niI -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rniI -e TODO -e FIXME -e XXX * 2> /dev/null']
        let lines = split(system(cmd), '\n')
        if v:shell_error != 0 | continue | endif
        for line in lines
            let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
            call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
        endfor
        break
    endfor
    if !empty(entries)
        call setqflist(entries)
        copen
    endif
endfunction
command! Todo call s:todo()
nnoremap <leader>t :Todo<space><cr>
" }}}
